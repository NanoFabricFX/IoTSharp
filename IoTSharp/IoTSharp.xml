<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IoTSharp</name>
    </assembly>
    <members>
        <member name="P:IoTSharp.AppSettings.MqttBroker">
            <summary>
            Broker settings
            </summary>
        </member>
        <member name="P:IoTSharp.AppSettings.MqttClient">
            <summary>
            mqtt client settings
            </summary>
        </member>
        <member name="P:IoTSharp.MqttClientSetting.MqttBroker">
            <summary>
            built-in or IP、HostName
            </summary>
        </member>
        <member name="T:IoTSharp.Extensions.RpcClient">
            <summary>
            https://github.com/chkr1011/MQTTnet/blob/master/Source/MQTTnet.Extensions.Rpc/MqttRpcClient.cs
            </summary>
        </member>
        <member name="M:IoTSharp.Extensions.DataExtension.SaveAsync``1(IoTSharp.Data.ApplicationDbContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid,IoTSharp.Data.DataSide)">
            <summary>
            Save Data to Device's and <typeparamref name="L"/>
            </summary>
            <typeparam name="L">Latest</typeparam>
            <param name="data"></param>
            <param name="dataSide"></param>
            <param name="deviceId"></param>
            <param name="_context"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Extensions.DataExtension.PreparingData``1(IoTSharp.Data.ApplicationDbContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid,IoTSharp.Data.DataSide)">
            <summary>
            Preparing Data to Device's   <typeparamref name="L"/>
            </summary>
            <typeparam name="L"></typeparam>
            <param name="_context"></param>
            <param name="data"></param>
            <param name="deviceId"></param>
            <param name="dataSide"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Extensions.DeviceExtension.AfterCreateDevice(IoTSharp.Data.ApplicationDbContext,IoTSharp.Data.Device)">
            <summary>
            When creating a device, all the things that need to be done here are done
            </summary>
            <param name="_context"></param>
            <param name="device"></param>
        </member>
        <member name="T:IoTSharp.Controllers.AccountController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.MyInfo">
            <summary>
            获取当前登录用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Login(IoTSharp.Dtos.LoginDto)">
            <summary>
            登录用户
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Logout">
            <summary>
            退出账号
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Register(IoTSharp.Dtos.RegisterDto)">
            <summary>
            注册用户
            </summary>
            <param name="model"></param>
            <returns >返回登录结果</returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.All(System.Guid)">
            <summary>
            返回客户所属用户列表
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.AuthorizedKeysController">
            <summary>
            全局设备认证KEY管理
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.AuthorizedKeysController.GetAuthorizedKeys">
            <summary>
            获取当前已登录用户所属客户的全局认证KEY
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AuthorizedKeysController.GetAuthorizedKey(System.Guid)">
            <summary>
            根据ID获取KEY
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.CustomersController">
            <summary>
            客户管理
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.GetCustomers(System.Guid)">
            <summary>
            获取指定租户下的所有客户
            </summary>
            <param name="tenantId">租户</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.GetCustomer(System.Guid)">
            <summary>
            返回指定id的客户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.PutCustomer(System.Guid,IoTSharp.Dtos.CustomerDto)">
            <summary>
            修改指定租户为 指定的信息
            </summary>
            <param name="id"></param>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.PostCustomer(IoTSharp.Dtos.CustomerDto)">
            <summary>
            为当前客户所在的租户新增客户
            </summary>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.DeleteCustomer(System.Guid)">
            <summary>
            删除指定的客户ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.DevicesController">
            <summary>
            设备管理
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetDevices(System.Guid)">
            <summary>
            获取指定客户的设备列表
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetIdentity(System.Guid)">
            <summary>
            获取指定设备的认证方式信息
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAttributeLatest(System.Guid)">
             <summary>
            获取指定设备的最新属性
             </summary>
             <param name="deviceId"></param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAttributeLatest(System.Guid,System.String)">
            <summary>
            获取指定设备指定keys的最新属性
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or  ; to split </param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryLatest(System.Guid)">
             <summary>
            获取指定设备的最新遥测数据
             </summary>
             <param name="deviceId"></param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryLatest(System.Guid,System.String)">
            <summary>
            获取指定设备的指定key 的遥测数据
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">指定键值列表， 使用分号或者逗号分割 。 </param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryData(System.Guid,System.String,System.DateTime)">
            <summary>
            获取指定设备和指定时间， 指定key的数据
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or  ; to split </param>
            <param name="begin">开始以时间， 比如 2019-06-06 12:24</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryData(System.Guid,System.String,System.DateTime,System.DateTime)">
            <summary>
            返回指定设备的的遥测数据， 按照keyname 和指定时间范围获取，如果keyname 为 all  , 则返回全部key 的数据
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or  ; to split </param>
            <param name="begin">For example: 2019-06-06 12:24</param>
            <param name="end">For example: 2019-06-06 12:24</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetDevice(System.Guid)">
            <summary>
            获取设备详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PutDevice(System.Guid,IoTSharp.Dtos.DevicePutDto)">
            <summary>
            修改设备
            </summary>
            <param name="id"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PostDevice(IoTSharp.Dtos.DevicePostDto)">
            <summary>
            创建设备， 客户ID和租户ID均为当前登录用户所属
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.DeleteDevice(System.Guid)">
            <summary>
            删除设备
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Rpc(System.String,System.String,System.Int32,System.Object)">
            <summary>
            远程控制指定设备， 此方法通过给远程设备发送mqtt消息进行控制，设备在收到信息后回复结果，此方法才算调用结束
            </summary>
            <param name="access_token"></param>
            <param name="method"></param>
            <param name="timeout"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Telemetry(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            HTTP方式上传遥测数据
            </summary>
            <param name="access_token">Device 's access token</param>
            <param name="telemetrys"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Attributes(System.String,IoTSharp.Data.DataSide,System.String)">
             <summary>
             获取服务测的设备熟悉
             </summary>
             <param name="access_token">Device 's access token </param>
            <param name="dataSide">Specifying data side.</param>
            <param name="keys">Specifying Attribute's keys</param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Attributes(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            上传客户侧属性数据
            </summary>
            <param name="access_token">Device 's access token </param>
            <param name="attributes">attributes</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetSessionStatus(System.Guid)">
            <summary>
            SessionStatus
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetClientStatus(System.Guid)">
            <summary>
            SessionStatus
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.InstallerController">
            <summary>
            安装
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.InstallerController.Instance">
            <summary>
            检查IoTSharp实例信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.MenuController">
            <summary>
            this is test purpose
            </summary>
        </member>
        <member name="T:IoTSharp.Controllers.TenantsController">
            <summary>
            租户管理
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.GetTenant">
            <summary>
            系统管理员用来获取全部租户列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.GetTenant(System.Guid)">
            <summary>
            普通用户用于活的自身的租户信息
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.PutTenant(System.Guid,IoTSharp.Data.Tenant)">
            <summary>
            修改指定的租户信息， 仅限租户管理员
            </summary>
            <param name="id"></param>
            <param name="tenant"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.PostTenant(IoTSharp.Data.Tenant)">
            <summary>
            新增租户， 仅限系统管理员
            </summary>
            <param name="tenant"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.DeleteTenant(System.Guid)">
            <summary>
            删除租户，仅限系统用户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:IoTSharp.Dtos.TokenEntity.access_token">
            <summary>
            token
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TokenEntity.expires_in">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Code">
            <summary>
            登录结果
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.SignIn">
            <summary>
            登录结果
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Succeeded">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Roles">
            <summary>
            用户所具备权限
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginDto.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginDto.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.Email">
            <summary>
            邮箱地址， 也是用户名，一个邮箱只能注册平台的一个客户，如果你在平台有两个租户都有账号，则需要两个邮箱地址。 
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.PhoneNumber">
            <summary>
            电话号码
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.Customer">
            <summary>
            用户隶属客户邮箱地址
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.Password">
            <summary>
            用户名密码
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.Email">
            <summary>
            系统管理员用户名
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.CustomerName">
            <summary>
            客户名称
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.Password">
            <summary>
            系统管理员密码
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.TenantName">
            <summary>
            租户姓名
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.TenantEMail">
            <summary>
            租户邮箱
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.CustomerEMail">
            <summary>
            客户邮箱
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.PhoneNumber">
            <summary>
            电话号码
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstanceDto.Version">
            <summary>
            系统版本
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstanceDto.Installed">
            <summary>
            是否被安装
            </summary>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.CheckOrUpdateDevStatus(IoTSharp.Data.Device)">
            <summary>
            //如果上次活动时间距离当前时间超过10秒 或者 设备离线状态， 则更新状态。
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.AddJWTSecurity(NSwag.Generation.AspNetCore.AspNetCoreOpenApiDocumentGeneratorSettings)">
            <summary>
            
            </summary>
            <param name="configure"></param>
        </member>
        <member name="T:IoTSharp.Handlers.EventBusHandler">
             <summary>
             iotsharp.services.datastream
             </summary>
            <remarks>Note: The injection of services needs before of `services.AddCap()`</remarks>
            
        </member>
        <member name="T:IoTSharp.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.ShowHelp">
            <summary>
              查找类似 显示帮助 的本地化字符串。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.TheCertificateIsInstalled">
            <summary>
              查找类似 The certificate is installed 的本地化字符串。
            </summary>
        </member>
        <member name="M:IoTSharp.Storage.PinusDBStorage.SqlToTDD(PinusDB.Data.PinusConnection,System.String,System.Guid)">
            <summary>
            转换获取到的值
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="devid"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Storage.ShardingStorage">
            <summary>
            由于此模式目前无法通过EFCore.Sharding 进行Group By 获取最新遥测数据， 和Select  新对象， 所以， 最新遥测依然从DataStorage表里获取，历史从分表里获取
            更多内容可以参考<seealso cref="!:https://github.com/Coldairarrow/EFCore.Sharding/issues/52"/>
            </summary>
        </member>
        <member name="M:IoTSharp.Storage.TaosStorage.SqlToTDD(Maikebing.Data.Taos.TaosConnection,System.String,System.String,System.String,System.String)">
            <summary>
            转换获取到的值
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <param name="keyname"></param>
            <returns></returns>
            <exception cref="!:https://github.com/taosdata/TDengine/issues/4269">务必注意此bug</exception>
        </member>
        <member name="T:LiteQueue.LiteQueue`1">
            <summary>
            Uses LiteDB to provide a persisted, thread safe, (optionally) transactional, FIFO queue.
            
            Suitable for use on clients as a lightweight, portable alternative to MSMQ. Not recommended for use 
            on large server side applications due to performance limitations of LiteDB.
            </summary>
        </member>
        <member name="P:LiteQueue.LiteQueue`1.IsTransactional">
            <summary>
            Impacts operation of <see cref="M:LiteQueue.LiteQueue`1.Dequeue"/> method. Can only be set once in constructor.
            </summary>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.#ctor(LiteDB.LiteDatabase,System.String,System.Boolean)">
            <summary>
            Creates a collection for you in the database
            </summary>
            <param name="db">The LiteDB database. You are responsible for its lifecycle (using/dispose)</param>
            <param name="collectionName">Name of the collection to create</param>
            <param name="transactional">Whether the queue should use transaction logic, default true</param>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.#ctor(LiteDB.ILiteCollection{LiteQueue.QueueEntry{`0}},System.Boolean)">
            <summary>
            Uses the provided database collection
            </summary>
            <param name="collection">A LiteDB collection.</param>
            <param name="transactional">Whether the queue should use transaction logic, default true</param>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.#ctor(LiteDB.LiteDatabase,System.Boolean)">
            <summary>
            Creates a collection for you in the database, collection's name is  <typeparamref name="T"/>
            </summary>
            <param name="db">The LiteDB database. You are responsible for its lifecycle (using/dispose)</param>
            <param name="transactional">Whether the queue should use transaction logic, default true</param>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Enqueue(`0)">
            <summary>
            Adds a single item to queue. See <see cref="M:LiteQueue.LiteQueue`1.Enqueue(System.Collections.Generic.IEnumerable{`0})"/> for adding a batch.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Enqueue(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a batch of items to the queue. See <see cref="M:LiteQueue.LiteQueue`1.Enqueue(`0)"/> for adding a single item.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Dequeue">
            <summary>
            Transactional queues:
                Marks item as checked out but does not remove from queue. You are expected to later call <see cref="M:LiteQueue.LiteQueue`1.Commit(LiteQueue.QueueEntry{`0})"/> or <see cref="M:LiteQueue.LiteQueue`1.Abort(LiteQueue.QueueEntry{`0})"/>
            Non-transactional queues:
                Removes item from queue with no need to call <see cref="M:LiteQueue.LiteQueue`1.Commit(LiteQueue.QueueEntry{`0})"/> or <see cref="M:LiteQueue.LiteQueue`1.Abort(LiteQueue.QueueEntry{`0})"/>
            </summary>
            <returns>An item if found or null</returns>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Dequeue(System.Int32)">
            <summary>
            Batch equivalent of <see cref="M:LiteQueue.LiteQueue`1.Dequeue"/>
            </summary>
            <param name="batchSize">The maximum number of items to dequeue</param>
            <returns>The items found or an empty collection (never null)</returns>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.CurrentCheckouts">
            <summary>
            Obtains list of items currently checked out (but not yet commited or aborted) as a result of Dequeue calls on a transactional queue
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when queue is not transactional</exception>
            <returns>Items found or empty collection (never null)</returns>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.ResetOrphans">
            <summary>
            Aborts all currently checked out items. Equivalent of calling <see cref="M:LiteQueue.LiteQueue`1.CurrentCheckouts"/> followed by <see cref="M:LiteQueue.LiteQueue`1.Abort(System.Collections.Generic.IEnumerable{LiteQueue.QueueEntry{`0}})"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when queue is not transactional</exception>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Abort(LiteQueue.QueueEntry{`0})">
            <summary>
            Aborts a transaction on a single item. See <see cref="M:LiteQueue.LiteQueue`1.Abort(System.Collections.Generic.IEnumerable{LiteQueue.QueueEntry{`0}})"/> for batches.
            </summary>
            <param name="item">An item that was obtained from a <see cref="M:LiteQueue.LiteQueue`1.Dequeue"/> call</param>
            <exception cref="T:System.InvalidOperationException">Thrown when queue is not transactional</exception>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Abort(System.Collections.Generic.IEnumerable{LiteQueue.QueueEntry{`0}})">
            <summary>
            Aborts a transation on a group of items. See <see cref="M:LiteQueue.LiteQueue`1.Abort(LiteQueue.QueueEntry{`0})"/> for a single item.
            </summary>
            <param name="items">Items that were obtained from a <see cref="M:LiteQueue.LiteQueue`1.Dequeue"/> call</param>
            <exception cref="T:System.InvalidOperationException">Thrown when queue is not transactional</exception>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Commit(LiteQueue.QueueEntry{`0})">
            <summary>
            Commits a transaction on a single item. See <see cref="M:LiteQueue.LiteQueue`1.Commit(System.Collections.Generic.IEnumerable{LiteQueue.QueueEntry{`0}})"/> for batches.
            </summary>
            <param name="item">An item that was obtained from a <see cref="M:LiteQueue.LiteQueue`1.Dequeue"/> call</param>
            <exception cref="T:System.InvalidOperationException">Thrown when queue is not transactional</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LiteQueue.LiteQueue`1.Commit(System.Collections.Generic.IEnumerable{LiteQueue.QueueEntry{`0}})" -->
        <member name="M:LiteQueue.LiteQueue`1.Count">
            <summary>
            Number of items in queue, including those that have been checked out.
            </summary>
        </member>
        <member name="M:LiteQueue.LiteQueue`1.Clear">
            <summary>
            Removes all items from queue, including any that have been checked out.
            </summary>
        </member>
    </members>
</doc>
